" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
	syntax on
endif

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
"
" " let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" syntax checking for several languages
Plugin 'scrooloose/syntastic'

" --------
" Use fzf for file searching
" Remap to Ctrl-P
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
nmap <C-p> :FZF<cr>
nmap <C-P> :FZF<cr>
" --------
Plugin 'airblade/vim-gitgutter'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'git_patch_tags.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-fugitive'
" --------
Plugin 'scrooloose/nerdcommenter'
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
" --------
Plugin 'godlygeek/tabular'
" --------
Plugin 'mhinz/vim-startify'
Plugin 'christoomey/vim-system-copy'
Plugin 'moll/vim-node'
Plugin 'rking/ag.vim'

Plugin 'jamessan/vim-gnupg'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'mizuchi/stl-syntax'

Plugin 'fatih/vim-go'
let g:go_fmt_command = "goimports"
let g:go_def_mode = 'guru'
let g:go_echo_command_info = 0

Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

Plugin 'uarun/vim-protobuf'
Plugin 'christoomey/vim-tmux-navigator'

Plugin 'itchyny/lightline.vim'

Plugin 'edkolev/tmuxline.vim'
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
        \ 'a': '[#S]',
        \ 'win': '#I:#W#F',
        \ 'cwin': '#I:#W#F',
        \ 'z': '[#{window_width},#{window_height}] [#{pane_width},#{pane_height}] %a %e %b %Y %H:%M',
        \ 'options': {
        \ 'status-justify': 'left' } }
" ----
Plugin 'mtth/scratch.vim'
" ---
Plugin 'jparise/vim-graphql'
" ---
Plugin 'voldikss/vim-search-me'
let g:vsm_search_engine = 'duckduckgo'
" ---
Plugin 'aklt/plantuml-syntax'
" ---
"
"  PLUGINS UNDER TESTING
"
"
call vundle#end()
" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif
"
set noswapfile

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
" set smartcase		" Do smart case matching
set ignorecase      " Ignore case while searching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)
" size of a hard tabstop
set tabstop=4
" http://vim.wikia.com/wiki/Indenting_source_code
set expandtab
set shiftwidth=4
set softtabstop=4
"
" set the width of text in the editor
set tw=80
"
syntax on
filetype plugin on
filetype plugin indent on

set smartindent
set autoindent
set cindent

set hlsearch " highlight the search results

" Activate syntax highlighting for roslaunch files
autocmd BufRead,BufNewFile *.launch setfiletype roslaunch

" remember where to go after entering a buffer
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" remap leader to , character
let g:mapleader=","

" the write shortcut
nmap <leader>w :w<cr>
nmap <leader>W :w<cr>

" indent the whole file
nmap <leader>i gg=G``<cr>

nmap <leader>z :w<cr>ZZ
nmap <leader>Z :w<cr>ZZ

" insert the present timestamp into the buffer
nmap <leader>time :r! date<cr>
nmap <leader> date :r! date<cr>

nmap <leader>sp :set paste<cr>i
nmap <leader>np :set nopaste<cr>
" indent the whole file, write and exit vim.
nmap <leader>x gg=G:w<cr>ZZ

" make sure that vim-airline works
set laststatus=2

" add some tab related shortcuts
nmap <C-t> :tab new<cr>
nmap <leader>ct :tab close<cr>

let g:markdown_fenced_languages = [
            \ 'css',
            \ 'javascript',
            \ 'js=javascript',
            \ 'json=javascript',
            \ 'ruby',
            \ 'sass',
            \ 'xml',
            \ 'html',
            \ 'java',
            \ 'plaintext=nosyntax',
            \ 'sql',
            \ 'sh'
            \ ]

function! AirlineInit()
    " let g:airline_section_a = ''
    " let g:airline_section_b = ''
    " let g:airline_section_c = ''
    " let g:airline_section_x = ''
    " let g:airline_section_y = ''
    let g:airline_section_z = airline#section#create(['%l', ':', '%c', '/', '%L', ' - ', '%p%%'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()

let g:airline_symbols_ascii = 1
let g:airline#extensions#wordcount#enabled = 1
let g:airline#extensions#default#section_truncate_width = {
            \ 'b': 79,
            \ 'x': 60,
            \ 'y': 88,
            \ 'z': 45,
            \ 'warning': 80,
            \ 'error': 80,
            \ }
silent! call airline#extensions#whitespace#disable()

" clean up commands copied from the shell
command ShellClean g/^#/norm "_dd

nmap <leader>gfs :GoFillStruct<cr>

" show the full path of an open buffer
nmap <leader>fp :echo expand('%:p')<cr>

" PLATFORM: this will change on the basis of the platform
" default: xsel (ubuntu)
" mac: pbcopy
let g:system_copy#copy_command='xsel --clipboard --input'
if has('mac') || has('macunix') || has('gui_macvim') || system('uname') =~? '^darwin'
    let g:system_copy#copy_command='pbcopy --clipboard --input'
endif

command FormatCurl s/-H/\\\r-H/g

let @m='ggVG:s/^\n/\r\r/ggg:normal€kb€kb€kb€kb€kb€kb%normal! vipJ:noh'
nmap <leader>pt :normal! @m<cr>

iab <expr> dts# strftime("%G-%m-%d %H:%M, %A, Week %U")
iab <expr> time# strftime("%H:%M")

autocmd FileType go,c,cpp,java,php,rb,py,javascript,cpp11,sh,erb,haml autocmd BufWritePre <buffer> %s/\s\+$//e

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yaml setl indentkeys-=<:>

autocmd FileType go,javascript set tw=100

autocmd BufNewFile,BufReadPost *.notes set filetype=markdown
autocmd BufWritePre *.notes autocmd BufWritePre <buffer> %s/\s\+$//e

set omnifunc=syntaxcomplete#Complete
set backspace=2

" Put a line at the 80 column mark
set colorcolumn=+1
highlight ColorColumn ctermbg=8

if !has('gui_running')
  set t_Co=256
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
	source /etc/vim/vimrc.local
endif
set secure exrc
